/*
	HDIssueData.h
	The implementation of properties and methods for the HDIssueData object.
	Generated by SudzC.com
*/
#import "HDIssueData.h"

#import "HDObjectRef.h"
#import "HDObjectRef.h"
#import "HDObjectRef.h"
#import "HDObjectRef.h"
#import "HDObjectRef.h"
#import "HDAccountData.h"
#import "HDObjectRef.h"
#import "HDAccountData.h"
#import "HDObjectRef.h"
#import "HDObjectRef.h"
#import "HDObjectRef.h"
#import "HDAttachmentDataArray.h"
#import "HDRelationshipDataArray.h"
#import "HDIssueNoteDataArray.h"
#import "HDCustomFieldValueForIssueDataArray.h"
#import "HDAccountDataArray.h"
#import "HDObjectRefArray.h"
@implementation HDIssueData
	@synthesize _id = __id;
	@synthesize view_state = _view_state;
	@synthesize last_updated = _last_updated;
	@synthesize project = _project;
	@synthesize category = _category;
	@synthesize priority = _priority;
	@synthesize severity = _severity;
	@synthesize status = _status;
	@synthesize reporter = _reporter;
	@synthesize summary = _summary;
	@synthesize version = _version;
	@synthesize build = _build;
	@synthesize platform = _platform;
	@synthesize os = _os;
	@synthesize os_build = _os_build;
	@synthesize reproducibility = _reproducibility;
	@synthesize date_submitted = _date_submitted;
	@synthesize sponsorship_total = _sponsorship_total;
	@synthesize handler = _handler;
	@synthesize projection = _projection;
	@synthesize eta = _eta;
	@synthesize resolution = _resolution;
	@synthesize fixed_in_version = _fixed_in_version;
	@synthesize target_version = _target_version;
	@synthesize description = _description;
	@synthesize steps_to_reproduce = _steps_to_reproduce;
	@synthesize additional_information = _additional_information;
	@synthesize attachments = _attachments;
	@synthesize relationships = _relationships;
	@synthesize notes = _notes;
	@synthesize custom_fields = _custom_fields;
	@synthesize due_date = _due_date;
	@synthesize monitors = _monitors;
	@synthesize sticky = _sticky;
	@synthesize tags = _tags;

	- (id) init
	{
		if(self = [super init])
		{
			self.view_state = nil; // [[HDObjectRef alloc] init];
			self.last_updated = nil;
			self.project = nil; // [[HDObjectRef alloc] init];
			self.category = nil;
			self.priority = nil; // [[HDObjectRef alloc] init];
			self.severity = nil; // [[HDObjectRef alloc] init];
			self.status = nil; // [[HDObjectRef alloc] init];
			self.reporter = nil; // [[HDAccountData alloc] init];
			self.summary = nil;
			self.version = nil;
			self.build = nil;
			self.platform = nil;
			self.os = nil;
			self.os_build = nil;
			self.reproducibility = nil; // [[HDObjectRef alloc] init];
			self.date_submitted = nil;
			self.handler = nil; // [[HDAccountData alloc] init];
			self.projection = nil; // [[HDObjectRef alloc] init];
			self.eta = nil; // [[HDObjectRef alloc] init];
			self.resolution = nil; // [[HDObjectRef alloc] init];
			self.fixed_in_version = nil;
			self.target_version = nil;
			self.description = nil;
			self.steps_to_reproduce = nil;
			self.additional_information = nil;
			self.attachments = nil; // [[HDAttachmentDataArray alloc] init];
			self.relationships = nil; // [[HDRelationshipDataArray alloc] init];
			self.notes = nil; // [[HDIssueNoteDataArray alloc] init];
			self.custom_fields = nil; // [[HDCustomFieldValueForIssueDataArray alloc] init];
			self.due_date = nil;
			self.monitors = nil; // [[HDAccountDataArray alloc] init];
			self.tags = nil; // [[HDObjectRefArray alloc] init];

		}
		return self;
	}

	+ (HDIssueData*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (HDIssueData*)[[[HDIssueData alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self._id = [[Soap getNodeValue: node withName: @"id"] intValue];
			self.view_state = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"view_state"]] object];
			self.last_updated = [Soap dateFromString: [Soap getNodeValue: node withName: @"last_updated"]];
			self.project = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"project"]] object];
			self.category = [Soap getNodeValue: node withName: @"category"];
			self.priority = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"priority"]] object];
			self.severity = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"severity"]] object];
			self.status = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"status"]] object];
			self.reporter = [[HDAccountData newWithNode: [Soap getNode: node withName: @"reporter"]] object];
			self.summary = [Soap getNodeValue: node withName: @"summary"];
			self.version = [Soap getNodeValue: node withName: @"version"];
			self.build = [Soap getNodeValue: node withName: @"build"];
			self.platform = [Soap getNodeValue: node withName: @"platform"];
			self.os = [Soap getNodeValue: node withName: @"os"];
			self.os_build = [Soap getNodeValue: node withName: @"os_build"];
			self.reproducibility = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"reproducibility"]] object];
			self.date_submitted = [Soap dateFromString: [Soap getNodeValue: node withName: @"date_submitted"]];
			self.sponsorship_total = [[Soap getNodeValue: node withName: @"sponsorship_total"] intValue];
			self.handler = [[HDAccountData newWithNode: [Soap getNode: node withName: @"handler"]] object];
			self.projection = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"projection"]] object];
			self.eta = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"eta"]] object];
			self.resolution = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"resolution"]] object];
			self.fixed_in_version = [Soap getNodeValue: node withName: @"fixed_in_version"];
			self.target_version = [Soap getNodeValue: node withName: @"target_version"];
			self.description = [Soap getNodeValue: node withName: @"description"];
			self.steps_to_reproduce = [Soap getNodeValue: node withName: @"steps_to_reproduce"];
			self.additional_information = [Soap getNodeValue: node withName: @"additional_information"];
			self.attachments = [[HDAttachmentDataArray newWithNode: [Soap getNode: node withName: @"attachments"]] object];
			self.relationships = [[HDRelationshipDataArray newWithNode: [Soap getNode: node withName: @"relationships"]] object];
			self.notes = [[HDIssueNoteDataArray newWithNode: [Soap getNode: node withName: @"notes"]] object];
			self.custom_fields = [[HDCustomFieldValueForIssueDataArray newWithNode: [Soap getNode: node withName: @"custom_fields"]] object];
			self.due_date = [Soap dateFromString: [Soap getNodeValue: node withName: @"due_date"]];
			self.monitors = [[HDAccountDataArray newWithNode: [Soap getNode: node withName: @"monitors"]] object];
			self.sticky = [[Soap getNodeValue: node withName: @"sticky"] boolValue];
			self.tags = [[HDObjectRefArray newWithNode: [Soap getNode: node withName: @"tags"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"IssueData"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<id>%@</id>", [NSString stringWithFormat: @"%i", self._id]];
		if (self.view_state != nil) [s appendString: [self.view_state serialize: @"view_state"]];
		if (self.last_updated != nil) [s appendFormat: @"<last_updated>%@</last_updated>", [Soap getDateString: self.last_updated]];
		if (self.project != nil) [s appendString: [self.project serialize: @"project"]];
		if (self.category != nil) [s appendFormat: @"<category>%@</category>", [[self.category stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.priority != nil) [s appendString: [self.priority serialize: @"priority"]];
		if (self.severity != nil) [s appendString: [self.severity serialize: @"severity"]];
		if (self.status != nil) [s appendString: [self.status serialize: @"status"]];
		if (self.reporter != nil) [s appendString: [self.reporter serialize: @"reporter"]];
		if (self.summary != nil) [s appendFormat: @"<summary>%@</summary>", [[self.summary stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.version != nil) [s appendFormat: @"<version>%@</version>", [[self.version stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.build != nil) [s appendFormat: @"<build>%@</build>", [[self.build stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.platform != nil) [s appendFormat: @"<platform>%@</platform>", [[self.platform stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.os != nil) [s appendFormat: @"<os>%@</os>", [[self.os stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.os_build != nil) [s appendFormat: @"<os_build>%@</os_build>", [[self.os_build stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.reproducibility != nil) [s appendString: [self.reproducibility serialize: @"reproducibility"]];
		if (self.date_submitted != nil) [s appendFormat: @"<date_submitted>%@</date_submitted>", [Soap getDateString: self.date_submitted]];
		[s appendFormat: @"<sponsorship_total>%@</sponsorship_total>", [NSString stringWithFormat: @"%i", self.sponsorship_total]];
		if (self.handler != nil) [s appendString: [self.handler serialize: @"handler"]];
		if (self.projection != nil) [s appendString: [self.projection serialize: @"projection"]];
		if (self.eta != nil) [s appendString: [self.eta serialize: @"eta"]];
		if (self.resolution != nil) [s appendString: [self.resolution serialize: @"resolution"]];
		if (self.fixed_in_version != nil) [s appendFormat: @"<fixed_in_version>%@</fixed_in_version>", [[self.fixed_in_version stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.target_version != nil) [s appendFormat: @"<target_version>%@</target_version>", [[self.target_version stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.description != nil) [s appendFormat: @"<description>%@</description>", [[self.description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.steps_to_reproduce != nil) [s appendFormat: @"<steps_to_reproduce>%@</steps_to_reproduce>", [[self.steps_to_reproduce stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.additional_information != nil) [s appendFormat: @"<additional_information>%@</additional_information>", [[self.additional_information stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.attachments != nil) [s appendString: [self.attachments serialize: @"attachments"]];
		if (self.relationships != nil) [s appendString: [self.relationships serialize: @"relationships"]];
		if (self.notes != nil) [s appendString: [self.notes serialize: @"notes"]];
		if (self.custom_fields != nil) [s appendString: [self.custom_fields serialize: @"custom_fields"]];
		if (self.due_date != nil) [s appendFormat: @"<due_date>%@</due_date>", [Soap getDateString: self.due_date]];
		if (self.monitors != nil) [s appendString: [self.monitors serialize: @"monitors"]];
		[s appendFormat: @"<sticky>%@</sticky>", (self.sticky)?@"true":@"false"];
		if (self.tags != nil) [s appendString: [self.tags serialize: @"tags"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[HDIssueData class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.view_state != nil) { [self.view_state release]; }
		if(self.last_updated != nil) { [self.last_updated release]; }
		if(self.project != nil) { [self.project release]; }
		if(self.category != nil) { [self.category release]; }
		if(self.priority != nil) { [self.priority release]; }
		if(self.severity != nil) { [self.severity release]; }
		if(self.status != nil) { [self.status release]; }
		if(self.reporter != nil) { [self.reporter release]; }
		if(self.summary != nil) { [self.summary release]; }
		if(self.version != nil) { [self.version release]; }
		if(self.build != nil) { [self.build release]; }
		if(self.platform != nil) { [self.platform release]; }
		if(self.os != nil) { [self.os release]; }
		if(self.os_build != nil) { [self.os_build release]; }
		if(self.reproducibility != nil) { [self.reproducibility release]; }
		if(self.date_submitted != nil) { [self.date_submitted release]; }
		if(self.handler != nil) { [self.handler release]; }
		if(self.projection != nil) { [self.projection release]; }
		if(self.eta != nil) { [self.eta release]; }
		if(self.resolution != nil) { [self.resolution release]; }
		if(self.fixed_in_version != nil) { [self.fixed_in_version release]; }
		if(self.target_version != nil) { [self.target_version release]; }
		if(self.description != nil) { [self.description release]; }
		if(self.steps_to_reproduce != nil) { [self.steps_to_reproduce release]; }
		if(self.additional_information != nil) { [self.additional_information release]; }
		if(self.attachments != nil) { [self.attachments release]; }
		if(self.relationships != nil) { [self.relationships release]; }
		if(self.notes != nil) { [self.notes release]; }
		if(self.custom_fields != nil) { [self.custom_fields release]; }
		if(self.due_date != nil) { [self.due_date release]; }
		if(self.monitors != nil) { [self.monitors release]; }
		if(self.tags != nil) { [self.tags release]; }
		[super dealloc];
	}

@end

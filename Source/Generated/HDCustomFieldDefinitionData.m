/*
	HDCustomFieldDefinitionData.h
	The implementation of properties and methods for the HDCustomFieldDefinitionData object.
	Generated by SudzC.com
*/
#import "HDCustomFieldDefinitionData.h"

#import "HDObjectRef.h"
@implementation HDCustomFieldDefinitionData
	@synthesize field = _field;
	@synthesize type = _type;
	@synthesize possible_values = _possible_values;
	@synthesize default_value = _default_value;
	@synthesize valid_regexp = _valid_regexp;
	@synthesize access_level_r = _access_level_r;
	@synthesize access_level_rw = _access_level_rw;
	@synthesize length_min = _length_min;
	@synthesize length_max = _length_max;
	@synthesize advanced = _advanced;
	@synthesize display_report = _display_report;
	@synthesize display_update = _display_update;
	@synthesize display_resolved = _display_resolved;
	@synthesize display_closed = _display_closed;
	@synthesize require_report = _require_report;
	@synthesize require_update = _require_update;
	@synthesize require_resolved = _require_resolved;
	@synthesize require_closed = _require_closed;

	- (id) init
	{
		if(self = [super init])
		{
			self.field = nil; // [[HDObjectRef alloc] init];
			self.possible_values = nil;
			self.default_value = nil;
			self.valid_regexp = nil;

		}
		return self;
	}

	+ (HDCustomFieldDefinitionData*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (HDCustomFieldDefinitionData*)[[[HDCustomFieldDefinitionData alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.field = [[HDObjectRef newWithNode: [Soap getNode: node withName: @"field"]] object];
			self.type = [[Soap getNodeValue: node withName: @"type"] intValue];
			self.possible_values = [Soap getNodeValue: node withName: @"possible_values"];
			self.default_value = [Soap getNodeValue: node withName: @"default_value"];
			self.valid_regexp = [Soap getNodeValue: node withName: @"valid_regexp"];
			self.access_level_r = [[Soap getNodeValue: node withName: @"access_level_r"] intValue];
			self.access_level_rw = [[Soap getNodeValue: node withName: @"access_level_rw"] intValue];
			self.length_min = [[Soap getNodeValue: node withName: @"length_min"] intValue];
			self.length_max = [[Soap getNodeValue: node withName: @"length_max"] intValue];
			self.advanced = [[Soap getNodeValue: node withName: @"advanced"] boolValue];
			self.display_report = [[Soap getNodeValue: node withName: @"display_report"] boolValue];
			self.display_update = [[Soap getNodeValue: node withName: @"display_update"] boolValue];
			self.display_resolved = [[Soap getNodeValue: node withName: @"display_resolved"] boolValue];
			self.display_closed = [[Soap getNodeValue: node withName: @"display_closed"] boolValue];
			self.require_report = [[Soap getNodeValue: node withName: @"require_report"] boolValue];
			self.require_update = [[Soap getNodeValue: node withName: @"require_update"] boolValue];
			self.require_resolved = [[Soap getNodeValue: node withName: @"require_resolved"] boolValue];
			self.require_closed = [[Soap getNodeValue: node withName: @"require_closed"] boolValue];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"CustomFieldDefinitionData"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.field != nil) [s appendString: [self.field serialize: @"field"]];
		[s appendFormat: @"<type>%@</type>", [NSString stringWithFormat: @"%i", self.type]];
		if (self.possible_values != nil) [s appendFormat: @"<possible_values>%@</possible_values>", [[self.possible_values stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.default_value != nil) [s appendFormat: @"<default_value>%@</default_value>", [[self.default_value stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.valid_regexp != nil) [s appendFormat: @"<valid_regexp>%@</valid_regexp>", [[self.valid_regexp stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<access_level_r>%@</access_level_r>", [NSString stringWithFormat: @"%i", self.access_level_r]];
		[s appendFormat: @"<access_level_rw>%@</access_level_rw>", [NSString stringWithFormat: @"%i", self.access_level_rw]];
		[s appendFormat: @"<length_min>%@</length_min>", [NSString stringWithFormat: @"%i", self.length_min]];
		[s appendFormat: @"<length_max>%@</length_max>", [NSString stringWithFormat: @"%i", self.length_max]];
		[s appendFormat: @"<advanced>%@</advanced>", (self.advanced)?@"true":@"false"];
		[s appendFormat: @"<display_report>%@</display_report>", (self.display_report)?@"true":@"false"];
		[s appendFormat: @"<display_update>%@</display_update>", (self.display_update)?@"true":@"false"];
		[s appendFormat: @"<display_resolved>%@</display_resolved>", (self.display_resolved)?@"true":@"false"];
		[s appendFormat: @"<display_closed>%@</display_closed>", (self.display_closed)?@"true":@"false"];
		[s appendFormat: @"<require_report>%@</require_report>", (self.require_report)?@"true":@"false"];
		[s appendFormat: @"<require_update>%@</require_update>", (self.require_update)?@"true":@"false"];
		[s appendFormat: @"<require_resolved>%@</require_resolved>", (self.require_resolved)?@"true":@"false"];
		[s appendFormat: @"<require_closed>%@</require_closed>", (self.require_closed)?@"true":@"false"];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[HDCustomFieldDefinitionData class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.field != nil) { [self.field release]; }
		if(self.possible_values != nil) { [self.possible_values release]; }
		if(self.default_value != nil) { [self.default_value release]; }
		if(self.valid_regexp != nil) { [self.valid_regexp release]; }
		[super dealloc];
	}

@end

/*
	HDFilterData.h
	The implementation of properties and methods for the HDFilterData object.
	Generated by SudzC.com
*/
#import "HDFilterData.h"

#import "HDAccountData.h"
@implementation HDFilterData
	@synthesize _id = __id;
	@synthesize owner = _owner;
	@synthesize project_id = _project_id;
	@synthesize is_public = _is_public;
	@synthesize name = _name;
	@synthesize filter_string = _filter_string;
	@synthesize url = _url;

	- (id) init
	{
		if(self = [super init])
		{
			self.owner = nil; // [[HDAccountData alloc] init];
			self.name = nil;
			self.filter_string = nil;
			self.url = nil;

		}
		return self;
	}

	+ (HDFilterData*) newWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (HDFilterData*)[[[HDFilterData alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self._id = [[Soap getNodeValue: node withName: @"id"] intValue];
			self.owner = [[HDAccountData newWithNode: [Soap getNode: node withName: @"owner"]] object];
			self.project_id = [[Soap getNodeValue: node withName: @"project_id"] intValue];
			self.is_public = [[Soap getNodeValue: node withName: @"is_public"] boolValue];
			self.name = [Soap getNodeValue: node withName: @"name"];
			self.filter_string = [Soap getNodeValue: node withName: @"filter_string"];
			self.url = [Soap getNodeValue: node withName: @"url"];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"FilterData"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		[s appendFormat: @"<id>%@</id>", [NSString stringWithFormat: @"%i", self._id]];
		if (self.owner != nil) [s appendString: [self.owner serialize: @"owner"]];
		[s appendFormat: @"<project_id>%@</project_id>", [NSString stringWithFormat: @"%i", self.project_id]];
		[s appendFormat: @"<is_public>%@</is_public>", (self.is_public)?@"true":@"false"];
		if (self.name != nil) [s appendFormat: @"<name>%@</name>", [[self.name stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.filter_string != nil) [s appendFormat: @"<filter_string>%@</filter_string>", [[self.filter_string stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.url != nil) [s appendFormat: @"<url>%@</url>", [[self.url stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[HDFilterData class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		if(self.owner != nil) { [self.owner release]; }
		if(self.name != nil) { [self.name release]; }
		if(self.filter_string != nil) { [self.filter_string release]; }
		if(self.url != nil) { [self.url release]; }
		[super dealloc];
	}

@end

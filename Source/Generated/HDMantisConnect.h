/*
	HDMantisConnect.h
	The interface definition of classes and methods for the MantisConnect web service.
	Generated by SudzC.com
*/
				
#import "Soap.h"
	
/* Add class references */
				
#import "HDStringArray.h"
#import "HDObjectRefArray.h"
#import "HDAccountDataArray.h"
#import "HDAttachmentDataArray.h"
#import "HDProjectAttachmentDataArray.h"
#import "HDRelationshipDataArray.h"
#import "HDIssueNoteDataArray.h"
#import "HDIssueDataArray.h"
#import "HDIssueHeaderDataArray.h"
#import "HDProjectDataArray.h"
#import "HDProjectVersionDataArray.h"
#import "HDFilterDataArray.h"
#import "HDCustomFieldDefinitionDataArray.h"
#import "HDCustomFieldLinkForProjectDataArray.h"
#import "HDCustomFieldValueForIssueDataArray.h"
#import "HDTagDataArray.h"
#import "HDProfileDataArray.h"
#import "HDProjectData.h"
#import "HDIssueHeaderData.h"
#import "HDCustomFieldDefinitionData.h"
#import "HDObjectRef.h"
#import "HDCustomFieldLinkForProjectData.h"
#import "HDCustomFieldValueForIssueData.h"
#import "HDTagDataSearchResult.h"
#import "HDProfileDataSearchResult.h"
#import "HDRelationshipData.h"
#import "HDIssueData.h"
#import "HDAccountData.h"
#import "HDTagData.h"
#import "HDProfileData.h"
#import "HDAttachmentData.h"
#import "HDProjectVersionData.h"
#import "HDFilterData.h"
#import "HDProjectAttachmentData.h"
#import "HDIssueNoteData.h"

/* Interface for the service */
				
@interface HDMantisConnect : SoapService
		
	/* Returns NSString*.  */
	- (SoapRequest*) mc_version: (id <SoapDelegate>) handler;
	- (SoapRequest*) mc_version: (id) target action: (SEL) action;

	/* Returns HDObjectRefArray*. Get the enumeration for statuses. */
	- (SoapRequest*) mc_enum_status: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_status: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for priorities. */
	- (SoapRequest*) mc_enum_priorities: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_priorities: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for severities. */
	- (SoapRequest*) mc_enum_severities: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_severities: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for reproducibilities. */
	- (SoapRequest*) mc_enum_reproducibilities: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_reproducibilities: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for projections. */
	- (SoapRequest*) mc_enum_projections: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_projections: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for ETAs. */
	- (SoapRequest*) mc_enum_etas: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_etas: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for resolutions. */
	- (SoapRequest*) mc_enum_resolutions: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_resolutions: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for access levels. */
	- (SoapRequest*) mc_enum_access_levels: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_access_levels: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for project statuses. */
	- (SoapRequest*) mc_enum_project_status: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_project_status: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for project view states. */
	- (SoapRequest*) mc_enum_project_view_states: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_project_view_states: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for view states. */
	- (SoapRequest*) mc_enum_view_states: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_view_states: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDObjectRefArray*. Get the enumeration for custom field types. */
	- (SoapRequest*) mc_enum_custom_field_types: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_enum_custom_field_types: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns NSString*. Get the enumeration for the specified enumeration type. */
	- (SoapRequest*) mc_enum_get: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password enumeration: (NSString*) enumeration;
	- (SoapRequest*) mc_enum_get: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password enumeration: (NSString*) enumeration;

	/* Returns BOOL. Check there exists an issue with the specified id. */
	- (SoapRequest*) mc_issue_exists: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id;
	- (SoapRequest*) mc_issue_exists: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id;

	/* Returns HDIssueData*. Get the issue with the specified id. */
	- (SoapRequest*) mc_issue_get: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id;
	- (SoapRequest*) mc_issue_get: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id;

	/* Returns int. Get the latest submitted issue in the specified project. */
	- (SoapRequest*) mc_issue_get_biggest_id: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_issue_get_biggest_id: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns int. Get the id of the issue with the specified summary. */
	- (SoapRequest*) mc_issue_get_id_from_summary: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password summary: (NSString*) summary;
	- (SoapRequest*) mc_issue_get_id_from_summary: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password summary: (NSString*) summary;

	/* Returns int. Submit the specified issue details. */
	- (SoapRequest*) mc_issue_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue: (HDIssueData*) issue;
	- (SoapRequest*) mc_issue_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue: (HDIssueData*) issue;

	/* Returns BOOL. Update Issue method. */
	- (SoapRequest*) mc_issue_update: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issueId: (int) issueId issue: (HDIssueData*) issue;
	- (SoapRequest*) mc_issue_update: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issueId: (int) issueId issue: (HDIssueData*) issue;

	/* Returns BOOL. Sets the tags for a specified issue. */
	- (SoapRequest*) mc_issue_set_tags: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id tags: (HDTagDataArray*) tags;
	- (SoapRequest*) mc_issue_set_tags: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id tags: (HDTagDataArray*) tags;

	/* Returns BOOL. Delete the issue with the specified id. */
	- (SoapRequest*) mc_issue_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id;
	- (SoapRequest*) mc_issue_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id;

	/* Returns int. Submit a new note. */
	- (SoapRequest*) mc_issue_note_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id note: (HDIssueNoteData*) note;
	- (SoapRequest*) mc_issue_note_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id note: (HDIssueNoteData*) note;

	/* Returns BOOL. Delete the note with the specified id. */
	- (SoapRequest*) mc_issue_note_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_note_id: (int) issue_note_id;
	- (SoapRequest*) mc_issue_note_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_note_id: (int) issue_note_id;

	/* Returns BOOL. Update a specific note of a specific issue. */
	- (SoapRequest*) mc_issue_note_update: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password note: (HDIssueNoteData*) note;
	- (SoapRequest*) mc_issue_note_update: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password note: (HDIssueNoteData*) note;

	/* Returns int. Submit a new relationship. */
	- (SoapRequest*) mc_issue_relationship_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id relationship: (HDRelationshipData*) relationship;
	- (SoapRequest*) mc_issue_relationship_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id relationship: (HDRelationshipData*) relationship;

	/* Returns BOOL. Delete the relationship for the specified issue. */
	- (SoapRequest*) mc_issue_relationship_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id relationship_id: (int) relationship_id;
	- (SoapRequest*) mc_issue_relationship_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id relationship_id: (int) relationship_id;

	/* Returns int. Submit a new issue attachment. */
	- (SoapRequest*) mc_issue_attachment_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id name: (NSString*) name file_type: (NSString*) file_type content: (NSData*) content;
	- (SoapRequest*) mc_issue_attachment_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id name: (NSString*) name file_type: (NSString*) file_type content: (NSData*) content;

	/* Returns BOOL. Delete the issue attachment with the specified id. */
	- (SoapRequest*) mc_issue_attachment_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_attachment_id: (int) issue_attachment_id;
	- (SoapRequest*) mc_issue_attachment_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_attachment_id: (int) issue_attachment_id;

	/* Returns NSData*. Get the data for the specified issue attachment. */
	- (SoapRequest*) mc_issue_attachment_get: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_attachment_id: (int) issue_attachment_id;
	- (SoapRequest*) mc_issue_attachment_get: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_attachment_id: (int) issue_attachment_id;

	/* Returns int. Add a new project to the tracker (must have admin privileges) */
	- (SoapRequest*) mc_project_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project: (HDProjectData*) project;
	- (SoapRequest*) mc_project_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project: (HDProjectData*) project;

	/* Returns BOOL. Add a new project to the tracker (must have admin privileges) */
	- (SoapRequest*) mc_project_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns BOOL. Update a specific project to the tracker (must have admin privileges) */
	- (SoapRequest*) mc_project_update: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id project: (HDProjectData*) project;
	- (SoapRequest*) mc_project_update: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id project: (HDProjectData*) project;

	/* Returns int. Get the id of the project with the specified name. */
	- (SoapRequest*) mc_project_get_id_from_name: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_name: (NSString*) project_name;
	- (SoapRequest*) mc_project_get_id_from_name: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_name: (NSString*) project_name;

	/* Returns HDIssueDataArray*. Get the issues that match the specified project id and paging details. */
	- (SoapRequest*) mc_project_get_issues: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id page_number: (int) page_number per_page: (int) per_page;
	- (SoapRequest*) mc_project_get_issues: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id page_number: (int) page_number per_page: (int) per_page;

	/* Returns HDIssueHeaderDataArray*. Get the issue headers that match the specified project id and paging details. */
	- (SoapRequest*) mc_project_get_issue_headers: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id page_number: (int) page_number per_page: (int) per_page;
	- (SoapRequest*) mc_project_get_issue_headers: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id page_number: (int) page_number per_page: (int) per_page;

	/* Returns HDAccountDataArray*. Get appropriate users assigned to a project by access level. */
	- (SoapRequest*) mc_project_get_users: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id access: (int) access;
	- (SoapRequest*) mc_project_get_users: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id access: (int) access;

	/* Returns HDProjectDataArray*. Get the list of projects that are accessible to the logged in user. */
	- (SoapRequest*) mc_projects_get_user_accessible: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password;
	- (SoapRequest*) mc_projects_get_user_accessible: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password;

	/* Returns HDStringArray*. Get the categories belonging to the specified project. */
	- (SoapRequest*) mc_project_get_categories: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_categories: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns int. Add a category of specific project. */
	- (SoapRequest*) mc_project_add_category: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id p_category_name: (NSString*) p_category_name;
	- (SoapRequest*) mc_project_add_category: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id p_category_name: (NSString*) p_category_name;

	/* Returns int. Delete a category of specific project. */
	- (SoapRequest*) mc_project_delete_category: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id p_category_name: (NSString*) p_category_name;
	- (SoapRequest*) mc_project_delete_category: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id p_category_name: (NSString*) p_category_name;

	/* Returns int. Rename a category of specific project. */
	- (SoapRequest*) mc_project_rename_category_by_name: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id p_category_name: (NSString*) p_category_name p_category_name_new: (NSString*) p_category_name_new p_assigned_to: (int) p_assigned_to;
	- (SoapRequest*) mc_project_rename_category_by_name: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id p_category_name: (NSString*) p_category_name p_category_name_new: (NSString*) p_category_name_new p_assigned_to: (int) p_assigned_to;

	/* Returns HDProjectVersionDataArray*. Get the versions belonging to the specified project. */
	- (SoapRequest*) mc_project_get_versions: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_versions: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns int. Submit the specified version details. */
	- (SoapRequest*) mc_project_version_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password version: (HDProjectVersionData*) version;
	- (SoapRequest*) mc_project_version_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password version: (HDProjectVersionData*) version;

	/* Returns BOOL. Update version method. */
	- (SoapRequest*) mc_project_version_update: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password version_id: (int) version_id version: (HDProjectVersionData*) version;
	- (SoapRequest*) mc_project_version_update: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password version_id: (int) version_id version: (HDProjectVersionData*) version;

	/* Returns BOOL. Delete the version with the specified id. */
	- (SoapRequest*) mc_project_version_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password version_id: (int) version_id;
	- (SoapRequest*) mc_project_version_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password version_id: (int) version_id;

	/* Returns HDProjectVersionDataArray*. Get the released versions that belong to the specified project. */
	- (SoapRequest*) mc_project_get_released_versions: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_released_versions: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns HDProjectVersionDataArray*. Get the unreleased version that belong to the specified project. */
	- (SoapRequest*) mc_project_get_unreleased_versions: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_unreleased_versions: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns HDProjectAttachmentDataArray*. Get the attachments that belong to the specified project. */
	- (SoapRequest*) mc_project_get_attachments: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_attachments: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns HDCustomFieldDefinitionDataArray*. Get the custom fields that belong to the specified project. */
	- (SoapRequest*) mc_project_get_custom_fields: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_custom_fields: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns NSData*. Get the data for the specified project attachment. */
	- (SoapRequest*) mc_project_attachment_get: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_attachment_id: (int) project_attachment_id;
	- (SoapRequest*) mc_project_attachment_get: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_attachment_id: (int) project_attachment_id;

	/* Returns int. Submit a new project attachment. */
	- (SoapRequest*) mc_project_attachment_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id name: (NSString*) name title: (NSString*) title description: (NSString*) description file_type: (NSString*) file_type content: (NSData*) content;
	- (SoapRequest*) mc_project_attachment_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id name: (NSString*) name title: (NSString*) title description: (NSString*) description file_type: (NSString*) file_type content: (NSData*) content;

	/* Returns BOOL. Delete the project attachment with the specified id. */
	- (SoapRequest*) mc_project_attachment_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_attachment_id: (int) project_attachment_id;
	- (SoapRequest*) mc_project_attachment_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_attachment_id: (int) project_attachment_id;

	/* Returns HDStringArray*. Get the subprojects ID of a specific project. */
	- (SoapRequest*) mc_project_get_all_subprojects: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_project_get_all_subprojects: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns HDFilterDataArray*. Get the filters defined for the specified project. */
	- (SoapRequest*) mc_filter_get: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id;
	- (SoapRequest*) mc_filter_get: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id;

	/* Returns HDIssueDataArray*. Get the issues that match the specified filter and paging details. */
	- (SoapRequest*) mc_filter_get_issues: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id filter_id: (int) filter_id page_number: (int) page_number per_page: (int) per_page;
	- (SoapRequest*) mc_filter_get_issues: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id filter_id: (int) filter_id page_number: (int) page_number per_page: (int) per_page;

	/* Returns HDIssueHeaderDataArray*. Get the issue headers that match the specified filter and paging details. */
	- (SoapRequest*) mc_filter_get_issue_headers: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id filter_id: (int) filter_id page_number: (int) page_number per_page: (int) per_page;
	- (SoapRequest*) mc_filter_get_issue_headers: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id filter_id: (int) filter_id page_number: (int) page_number per_page: (int) per_page;

	/* Returns NSString*. Get the value for the specified configuration variable. */
	- (SoapRequest*) mc_config_get_string: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password config_var: (NSString*) config_var;
	- (SoapRequest*) mc_config_get_string: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password config_var: (NSString*) config_var;

	/* Returns BOOL. Notifies MantisBT of a check-in for the issue with the specified id. */
	- (SoapRequest*) mc_issue_checkin: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id comment: (NSString*) comment fixed: (BOOL) fixed;
	- (SoapRequest*) mc_issue_checkin: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password issue_id: (int) issue_id comment: (NSString*) comment fixed: (BOOL) fixed;

	/* Returns NSString*. Get the value for the specified user preference. */
	- (SoapRequest*) mc_user_pref_get_pref: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password project_id: (int) project_id pref_name: (NSString*) pref_name;
	- (SoapRequest*) mc_user_pref_get_pref: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password project_id: (int) project_id pref_name: (NSString*) pref_name;

	/* Returns HDProfileDataSearchResult*. Get profiles available to the current user. */
	- (SoapRequest*) mc_user_profiles_get_all: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password page_number: (int) page_number per_page: (int) per_page;
	- (SoapRequest*) mc_user_profiles_get_all: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password page_number: (int) page_number per_page: (int) per_page;

	/* Returns HDTagDataSearchResult*. Gets all the tags. */
	- (SoapRequest*) mc_tag_get_all: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password page_number: (int) page_number per_page: (int) per_page;
	- (SoapRequest*) mc_tag_get_all: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password page_number: (int) page_number per_page: (int) per_page;

	/* Returns int. Creates a tag. */
	- (SoapRequest*) mc_tag_add: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password tag: (HDTagData*) tag;
	- (SoapRequest*) mc_tag_add: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password tag: (HDTagData*) tag;

	/* Returns BOOL. Deletes a tag. */
	- (SoapRequest*) mc_tag_delete: (id <SoapDelegate>) handler username: (NSString*) username password: (NSString*) password tag_id: (int) tag_id;
	- (SoapRequest*) mc_tag_delete: (id) target action: (SEL) action username: (NSString*) username password: (NSString*) password tag_id: (int) tag_id;

		
	+ (HDMantisConnect*) service;
	+ (HDMantisConnect*) serviceWithUsername: (NSString*) username andPassword: (NSString*) password;
@end
	